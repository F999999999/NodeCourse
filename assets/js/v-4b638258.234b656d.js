"use strict";(self.webpackChunkNodeCourse=self.webpackChunkNodeCourse||[]).push([[35],{8916:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-4b638258",path:"/guide/03-%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE%E8%8E%B7%E5%8F%96.html",title:"3.请求数据获取",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"3.1 GET请求数据获取",slug:"_3-1-get请求数据获取",children:[{level:3,title:"3.1.1 请求对象ctx.query",slug:"_3-1-1-请求对象ctx-query",children:[]},{level:3,title:"3.1.2 请求字符串 ctx.querystring",slug:"_3-1-2-请求字符串-ctx-querystring",children:[]}]},{level:2,title:"3.2 POST请求参数获取",slug:"_3-2-post请求参数获取",children:[]}],filePathRelative:"guide/03-请求数据获取.md",git:{updatedTime:1633735293e3,contributors:[{name:"YeungWanLum",email:"295386487@qq.com",commits:1}]}}},9511:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(6252).uE)('<h1 id="_3-请求数据获取" tabindex="-1"><a class="header-anchor" href="#_3-请求数据获取" aria-hidden="true">#</a> 3.请求数据获取</h1><h2 id="_3-1-get请求数据获取" tabindex="-1"><a class="header-anchor" href="#_3-1-get请求数据获取" aria-hidden="true">#</a> 3.1 GET请求数据获取</h2><p>在koa中，获取GET请求数据源头是koa中request对象中的query方法或querystring方法，query返回是格式化好的参数对象，querystring返回的是请求字符串，由于ctx对request的API有直接引用的方式，所以获取GET请求数据有两个途径。</p><h3 id="_3-1-1-请求对象ctx-query" tabindex="-1"><a class="header-anchor" href="#_3-1-1-请求对象ctx-query" aria-hidden="true">#</a> 3.1.1 请求对象ctx.query</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 1. 导入 Koa 包</span>\n<span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;koa&#39;</span><span class="token punctuation">)</span>\n<span class="token comment">// 2. 使用 new 调用 koa() 构造函数，来创建应用程序</span>\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span> <span class="token keyword">async</span> <span class="token punctuation">(</span> <span class="token parameter">ctx</span> <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 从上下文中直接获取</span>\n  <span class="token keyword">let</span> ctx_query <span class="token operator">=</span> ctx<span class="token punctuation">.</span>query\n\n  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">{</span>\n    ctx_query\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 4. 监听 指定的 3000 端口</span>\napp<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;服务运行在 http://localhost:3000&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="_3-1-2-请求字符串-ctx-querystring" tabindex="-1"><a class="header-anchor" href="#_3-1-2-请求字符串-ctx-querystring" aria-hidden="true">#</a> 3.1.2 请求字符串 ctx.querystring</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 1. 导入 Koa 包</span>\n<span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;koa&#39;</span><span class="token punctuation">)</span>\n<span class="token comment">// 2. 使用 new 调用 koa() 构造函数，来创建应用程序</span>\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span> <span class="token keyword">async</span> <span class="token punctuation">(</span> <span class="token parameter">ctx</span> <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 从上下文中直接获取</span>\n  <span class="token keyword">let</span> ctx_querystring <span class="token operator">=</span> ctx<span class="token punctuation">.</span>querystring\n\n  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">{</span>\n    ctx_querystring\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 4. 监听 指定的 3000 端口</span>\napp<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;服务运行在 http://localhost:3000&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="_3-2-post请求参数获取" tabindex="-1"><a class="header-anchor" href="#_3-2-post请求参数获取" aria-hidden="true">#</a> 3.2 POST请求参数获取</h2><p>对于POST请求的处理，koa-bodyparser中间件可以把koa2上下文的formData数据解析到ctx.request.body中</p><ol><li>安装koa-bodyparser</li></ol><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">npm</span> i koa-bodyparser\n</code></pre></div><ol start="2"><li>使用</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;koa&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> bodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;koa-bodyparser&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 使用ctx.body解析中间件</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">bodyParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span> <span class="token keyword">async</span> <span class="token punctuation">(</span> <span class="token parameter">ctx</span> <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span> ctx<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">&#39;/&#39;</span> <span class="token operator">&amp;&amp;</span> ctx<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">&#39;GET&#39;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 当GET请求时候返回表单页面</span>\n    <span class="token keyword">let</span> html <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n      &lt;h1&gt;koa2 request post demo&lt;/h1&gt;\n      &lt;form method=&quot;POST&quot; action=&quot;/&quot;&gt;\n        &lt;p&gt;userName&lt;/p&gt;\n        &lt;input name=&quot;userName&quot; /&gt;&lt;br/&gt;\n        &lt;p&gt;nickName&lt;/p&gt;\n        &lt;input name=&quot;nickName&quot; /&gt;&lt;br/&gt;\n        &lt;p&gt;email&lt;/p&gt;\n        &lt;input name=&quot;email&quot; /&gt;&lt;br/&gt;\n        &lt;button type=&quot;submit&quot;&gt;submit&lt;/button&gt;\n      &lt;/form&gt;\n    </span><span class="token template-punctuation string">`</span></span>\n    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> html\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> ctx<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">&#39;/&#39;</span> <span class="token operator">&amp;&amp;</span> ctx<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">&#39;POST&#39;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 当POST请求的时候，中间件koa-bodyparser解析POST表单里的数据，并显示出来</span>\n    <span class="token keyword">let</span> postData <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body\n    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> postData\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 其他请求显示404</span>\n    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">&#39;&lt;h1&gt;404！！！ o(╯□╰)o&lt;/h1&gt;&#39;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\napp<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;[demo] request post is starting at port 3000&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div>',13),t={},e=(0,a(3744).Z)(t,[["render",function(n,s){return p}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,p]of s)n[a]=p;return n}}}]);